/*  Copyright (C) 1998-2002 Regents of the University of California
 *  This file is part of ManyMinds.
 *
 *  ManyMinds is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *  
 *  ManyMinds is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with ManyMinds; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 package manyminds.datamodel;

import java.util.Date;

import manyminds.ManyMindsConstants;
import manyminds.application.ApplicationContext;
import manyminds.artifact.Artifact;
import manyminds.debug.Formatter;
import manyminds.debug.LogRecord;

/**
 * This is a formatter for the Java Logging API (currently actually implemented as a modification of Lumberjack
 * in manyminds.debug) that outputs a CSV (comma separated value) table of interesting events.  It only
 * handles events that it is specifically interested in that are generated by the ManyMinds log system (not
 * anything, it has to have a particular event type).
 * 
 * @author eric
 *
 */
public class
CSVFormatter
extends Formatter {

    /**
     * A convenience class to store all information about an edit.  No get/set methods, just public fields.
     * Sloppy, I know. 
     * 
     * @author eric
     *
     */
    private class
    Edit {
    
        public String editStart, editEnd, editFrom, editTo, editDoc, editType, currentPage, otherField;
    
        public
        Edit() {
            editStart = " ";
            editEnd = " ";
            editFrom = " ";
            editTo = " ";
            editDoc = " ";
            editType = " ";
            currentPage = " ";
            otherField = " ";
        }
        
        /**
         * Creates a CSV formatted version of the edit, escaping anything that needs escaping.
         * @see java.lang.Object#toString()
         */
        public String
        toString() {
            StringBuffer retVal = new StringBuffer();
            retVal.append("\"");
            retVal.append(editStart.replace('"','\'')); //begin edit
            retVal.append("\",");
            
            retVal.append("\"");
            retVal.append(editEnd.replace('"','\'')); //end edit
            retVal.append("\",");
            
            retVal.append("\"");
            retVal.append(editType.replace('"','\'')); //edit type
            retVal.append("\",");
            
            retVal.append("\"");
            retVal.append(editDoc.replace('"','\'')); //edit name
            retVal.append("\",");
            
            retVal.append("\"");
            retVal.append(editFrom.replace('"','\'').replace('\n',' ')); //edit from
            retVal.append("\",");
            
            retVal.append("\"");
            retVal.append(editTo.replace('"','\'').replace('\n',' ')); //edit to
            retVal.append("\",");

            retVal.append("\"");
            retVal.append(currentPage.replace('"','\'')); //edit name
            retVal.append("\",");

            retVal.append("\"");
            retVal.append(otherField.replace('"','\'')); //edit name
            retVal.append("\"\n");

            return retVal.toString();
        }
    }

    public
    CSVFormatter() {}
    
    /**
     * Decides if this is a worthy event to spit out to its stream, and creates the appropriate Edit object.
     * @see manyminds.debug.Formatter#format(manyminds.debug.LogRecord)
     */
    public String
    format(LogRecord logRecord) {
        try {
            Edit edit = new Edit();
            Artifact a = (Artifact)ApplicationContext.getContext().getApplicationComponent(ManyMindsConstants.ARTIFACT_ID);
            if ((a != null) && (a.getSelectedIndex() > -1)) {
                edit.currentPage = a.getTitleAt(a.getSelectedIndex());
            }
            if ("Value Change".equals(logRecord.getMessage())) {
                Object[] objparms = logRecord.getParameters();
                edit.editStart = objparms[4].toString();
                edit.editEnd = objparms[5].toString();
                edit.editDoc = objparms[0].toString();
                edit.editFrom = objparms[1].toString();
                edit.editTo = objparms[2].toString();
                edit.editType = objparms[3].toString();
                
                if (edit.editDoc.startsWith("current-notebook-section")) {
                    edit.editType = "Page Flip";
                } else if (edit.editDoc.startsWith("current-notebook-page")) {
                    edit.editType = "Page Flip";
                } else if (edit.editDoc.indexOf(" IN ") >= 0) {
                    edit.editType = "Number of Pages Changed";
                } else if (edit.editDoc.startsWith("last-page-served")) {
                    edit.editType = "Page Viewed in Browser";
                } else if (edit.editDoc.startsWith("comment")) {
                    edit.editType = "Document Change: Comment Made";
                }
                
                if (edit.editType.startsWith("Document Change")) {
                    if ((!edit.editFrom.trim().equals("")) && (edit.editTo.startsWith(edit.editFrom))) {
                        edit.otherField = "Workspace Edit: Append";
                    } else if (edit.editTo.length() < edit.editFrom.length()) {
                        edit.otherField = "Workspace Edit: Delete";
                    } else {
                        edit.otherField = "Workspace Edit: Other";
                    }
                } else if (edit.editType.equals("Rater Change")) {
                    try {
                        if ((!edit.editFrom.trim().equals("")) && !(edit.editTo.trim().equals(""))) {
                            int from = Integer.parseInt(edit.editFrom.substring(0,edit.editFrom.indexOf(":")));
                            int to = Integer.parseInt(edit.editTo.substring(0,edit.editTo.indexOf(":")));
                            if (from > to) {
                                edit.otherField = "Rater Change: Decrease";
                            } else if (from < to) {
                                edit.otherField = "Rater Change: Increase";
                            } else {
                                edit.otherField = "Rater Change: No Change";
                            }
                        }
                    } catch (Throwable t) {
                        t.printStackTrace();
                    }
                }
                
            } else if ("Reading advice".equals(logRecord.getMessage())) {
                edit.editStart = LogListener.SHORT_DATE_FORMAT.format(new Date());
                edit.editEnd = LogListener.SHORT_DATE_FORMAT.format(new Date());
                edit.editType = logRecord.getMessage();
                edit.editDoc = logRecord.getParameters()[0].toString();
            } else if (("Adding advice".equals(logRecord.getMessage()))
                    || ("Dismissed advice".equals(logRecord.getMessage()))) {
                edit.editStart = LogListener.SHORT_DATE_FORMAT.format(new Date());
                edit.editEnd = LogListener.SHORT_DATE_FORMAT.format(new Date());
                edit.editType = logRecord.getMessage();
                edit.editDoc = logRecord.getParameters()[0].toString();
                edit.editTo = logRecord.getParameters()[1].toString();
            } else if (("Showing ToolTip".equals(logRecord.getMessage()))) {
                edit.editStart = LogListener.SHORT_DATE_FORMAT.format(new Date());
                edit.editEnd = LogListener.SHORT_DATE_FORMAT.format(new Date());
                edit.editType = logRecord.getMessage();
                edit.editFrom = logRecord.getParameters()[0].toString();
            } else {
                return "";
            }
            return edit.toString();
        } catch (Throwable t) {
            t.printStackTrace();
            return "";
        }
    }
}